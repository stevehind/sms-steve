{"version":3,"sources":["api.js","InputForm.js","Emoji.js","App.js","serviceWorker.js","index.js"],"names":["api","send_sms","options","window","fetch","method","headers","body","JSON","stringify","then","res","status","json","data","error","console","log","Error","validateForm","inputs","errors","valid","Object","values","forEach","val","length","InputForm","props","handleNumberChange","value","state","sender_number","validation","validator","isMobilePhone","setState","disabled","btnColor","handleChange","event","preventDefault","target","name","sender_name","sender_message","succeeded","failed","handleSubmit","bind","ev","this","number","message","payload","proessing","catch","err","processing","className","onSubmit","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","type","placeholder","autoComplete","onChange","country","enableAreaCodes","padding","backgroundColor","border","renderSuccess","renderForm","Component","Emoji","role","aria-label","label","aria-hidden","symbol","App","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27091113.chunk.js","sourcesContent":["const send_sms = options => {\n    return window\n        .fetch(`https://sms-22448-steve.herokuapp.com/api/v1/web-sms`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(options)\n        })\n        .then(\n            res => {\n                if (res.status === 200) {\n                    return res.json();\n                } else {\n                    return null;\n                }\n        })\n        .then(data => {\n            if (!data || data.error) {\n                console.log(\"API Error: \", { data });\n                throw Error (\"API Error\");\n            } else {\n                return data;\n            }\n        });\n};\n\nconst api = {\n    send_sms : send_sms\n};\n\nexport default api;","import React, { Component} from \"react\";\nimport ReactPhoneInput from \"react-phone-input-2\";\nimport './index.css';\nimport './InputForm.css';\nimport 'react-phone-input-2/lib/bootstrap.css';\nimport api from './api.js';\nimport validator from \"validator\";\n\nconst validateForm = (inputs, errors) => {\n    let valid = true;\n    Object.values(errors).forEach(\n        // If there is an error String, set valid to false\n        (val) => val.length > 0 && (valid = false)  \n    );\n    Object.values(inputs).forEach(\n        (val) => val.length === 0 && (valid = false)\n    );\n\n    return valid;\n}\n\nclass InputForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            btnColor: 'lightblue',\n            disabled: true,\n            succeeded: false,\n            failed: false,\n            valid: false,\n            error: null,\n            errors: {\n                sender_name: '',\n                sender_number: '',\n                sender_message: ''    \n            },\n            inputs: {\n                sender_name: '',\n                sender_number: '',\n                sender_message: ''\n            }\n        }\n        \n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleNumberChange = value => {\n        let inputs = this.state.inputs;\n        let errors = this.state.errors;\n\n        inputs.sender_number = value;\n\n        console.log(inputs.sender_number);\n\n        let validation = validator.isMobilePhone(inputs.sender_number);\n\n        console.log(validation);    \n\n        errors.sender_number = \n            validation\n            ? ''\n            : \"This is likely not a valid number and you can't submit it, please check it.\";\n\n        if(validateForm(this.state.inputs, this.state.errors)) {\n            console.log('Valid Form');\n            this.setState({\n                valid: true,\n                disabled: false,\n                btnColor: 'blue'\n            })\n        } else {\n            console.log('Invalid form');\n            this.setState({\n                valid: false,\n                disabled: true,\n                btnColor: 'lightblue'\n            })\n        }\n    }\n\n    handleChange = event => {\n        event.preventDefault();\n        const {name, value} = event.target;\n        let errors = this.state.errors;\n        let inputs = this.state.inputs;\n\n        switch (name) {\n            case 'sender_name':\n                errors.sender_name = \n                    value.length < 2\n                    ? 'Name must contain at least two characters.'\n                    : '';\n                inputs.sender_name = value;\n                break;\n            case 'sender_message':\n                errors.sender_message =\n                    value.length > 280\n                    ? 'Messages need to be <280 characters. No `War and Peace`, please.'\n                    : '';\n                inputs.sender_message = value;    \n                break;\n            default:\n                break;\n        }\n\n        this.setState({errors, inputs});\n\n        if(validateForm(this.state.inputs, this.state.errors)) {\n            console.log('Valid Form');\n            this.setState({\n                valid: true,\n                disabled: false,\n                btnColor: 'blue'\n            })\n        } else {\n            console.log('Invalid form');\n            this.setState({\n                valid: false,\n                disabled: true,\n                btnColor: 'lightblue'\n            })\n        }\n    }\n\n    async handleSubmit(ev){\n        ev.preventDefault();\n\n        api\n        .send_sms({\n            name: this.state.inputs.sender_name,\n            number: this.state.inputs.sender_number,\n            message: this.state.inputs.sender_message\n        })\n        .then(payload => {\n            if (payload.error) {\n                this.setState({\n                    error: `Sending failed: ${payload.error.message}`,\n                    disabled: false,\n                    proessing: false\n                });\n                console.log(\"Error\", payload.error);\n            } else {\n                this.setState({\n                    succeeded: true,\n                    error: \"\",\n                });\n                console.log(\"Success!\")\n            }\n        })\n        .catch(err => {\n            this.setState({\n                error: err.message,\n                failed: true,\n                processing: false\n            });\n            console.log(err);\n        });\n    }\n\n    renderSuccess() {\n        return (\n          <div className=\"sr-field-success message\">\n            <h3>Message sent!</h3>\n            <p>Refresh to send another.</p>\n          </div>\n        );\n      }\n\n    renderForm() {\n        var style = {\n            base: {\n              color: \"#32325d\",\n              fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n              fontSmoothing: \"antialiased\",\n              fontSize: \"16px\",\n              \"::placeholder\": {\n                color: \"#aab7c4\"\n              }\n            },\n            invalid: {\n              color: \"#fa755a\",\n              iconColor: \"#fa755a\"\n            }\n          };\n\n        const {errors} = this.state\n\n        return (\n            <div className=\"full-container vertical-center\">\n                <form onSubmit={this.handleSubmit}>\n                    <h2>Just like using your phone...</h2>\n                    <h3>...except a web app...</h3>\n                    <h4>...and also dumber.</h4>\n                    <h5>Enter your details and message below, then hit send to SMS Steve.</h5>\n                    <div className=\"sr-combo-inputs\" style={style}>\n                        <div className=\"sr-combo-inputs-row\">\n                            <p className=\"no-margin-bottom text-left\">Your name:</p>\n                            <input\n                                type=\"text\"\n                                name=\"sender_name\"\n                                placeholder=\"I can't really make you put in your real name, can I?\"\n                                className=\"sr-input\"\n                                autoComplete=\"cardholder\"\n                                onChange={this.handleChange}\n                            />\n                            {errors.sender_name.length > 0 && <span style={{color:'red'}}>{errors.sender_name}</span>}\n                            <p className=\"no-margin-bottom text-left\">Your number (US only at the moment):</p>\n                            <p className=\"no-margin-bottom text-left\"><i>(Getting this input component to be the same width as the others is beyond me. Any help warmly appreciated!)</i></p>\n\n                            <ReactPhoneInput\n                                name=\"sender_number\"\n                                className=\"react-tel-input\"\n                                country=\"us\"\n                                enableAreaCodes={true}\n                                autoComplete=\"cardholder\"\n                                value={this.state.inputs.sender_number}\n                                onChange={this.handleNumberChange}\n                            />\n                            {errors.sender_number.length > 0 && <span style={{color:'red'}}>{errors.sender_number}</span>}\n                            <p className=\"no-margin-bottom text-left\">Your message:</p>\n                            <textarea\n                                type=\"text\"\n                                name=\"sender_message\"\n                                placeholder=\"280 character max. Brevity is the soul of wit.\"\n                                className=\"sr-input\"\n                                autoComplete=\"cardholder\"\n                                onChange={this.handleChange}\n                            />\n                            {errors.sender_message.length > 0 && <span style={{color:'red'}}>{errors.sender_message}</span>}\n                        <div className=\"pad-bottom\" style={{color:'red', padding: 5}}>\n                            {this.state.failed ? \"Sending message failed. Try again.\" : null}\n                        </div>\n                        </div>\n                        {!this.state.succeeded && (\n                            <button\n                                className=\"btn\"\n                                disabled={this.state.disabled}\n                                style={{\n                                    backgroundColor : this.state.btnColor,\n                                    border: this.state.btnColor}}\n                            >\n                                {this.state.failed ? \"Try again.\" : \"Send\"}\n                            </button>\n                        )}\n                    </div>\n                </form>\n            </div>\n        ) \n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.succeeded && this.renderSuccess()}\n                {!this.state.succeeded && this.renderForm()}\n            </div>\n        );\n    }\n    \n}\n\nexport default InputForm;","import React from 'react';\n\nconst Emoji = props => (\n    <span\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\n\nexport default Emoji;","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport InputForm from './InputForm';\nimport Emoji from './Emoji';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <p><Emoji symbol=\"☎️\"/> SMS<a href=\"http://www.stevehind.me\" className=\"\"> Steve </a><Emoji symbol=\"☎️\"/></p>\n      </header>\n        <div className=\"App-body\">\n          <InputForm/>\n        </div>\n      <footer className=\"App-footer\">\n        <p>©Steve Hind, 2020.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}